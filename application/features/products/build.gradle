plugins {
    alias(libs.plugins.kotlin)
    alias(libs.plugins.kotlin.spring)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.openapi.generator)
}
repositories {
    mavenCentral()
}
dependencies {
    /* modules */
    implementation project(':application:domain')

    /* kotlin */
    implementation(libs.kotlin)
    implementation(libs.kotlin.logging)
    implementation(libs.jackson.module.kotlin)

    /* spring */
    implementation(libs.spring.boot.starter.web)

    /* open-api-generator */
    compileOnly(libs.javax.servlet.api)

    /* testing */
    testImplementation(libs.jupiter)
    testImplementation(libs.kotest)
    testImplementation(libs.mockk)
    testImplementation(libs.spring.boot.starter.test)
}
openApiGenerate {
    generatorName = "kotlin-spring" // Use the Kotlin Spring generator
    inputSpec = "$projectDir/src/main/resources/open-api-specs/products-v1.yaml" // Path to the YAML file
    outputDir = "$buildDir/generated" // Output directory for generated code
    apiPackage = "com.example.features.products.api" // Package for API interfaces
    modelPackage = "com.example.features.products.models" // Package for models

    configOptions = [
            interfaceOnly        : "true",    // Generate only interfaces (no controllers)
            skipDefaultInterface : "true", // Don't generate default interfaces
            useBeanValidation    : "false", // Don't use Bean Validation
            documentationProvider: "none", // Don't generate documentation
            exceptionHandler     : "false", // Don't generate exception handlers
//            dateLibrary: "java8",     // Use Java 8 date library
            useTags              : "true"           // Separate files by tags (optional)
    ]
}
compileKotlin {
    dependsOn "openApiGenerate"
}
sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/src/main/kotlin"
        }
    }
}
tasks.named('bootJar').configure {
    enabled = false
}
tasks.test {
    useJUnitPlatform()
    failFast = true
}